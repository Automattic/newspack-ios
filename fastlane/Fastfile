default_platform(:ios)
fastlane_require 'xcodeproj'
fastlane_require 'dotenv'

USER_ENV_FILE_PATH = File.join(Dir.home, '.nios-env.default')
PROJECT_ENV_FILE_PATH = File.expand_path(File.join(Dir.pwd, '../.configure-files/project.env'))

# Use this instead of getting values from ENV directly
# It will throw an error if the requested value is missing
def get_required_env(key)
  unless ENV.key?(key)
    UI.user_error!("Environment variable '#{key}' is not set. Have you setup #{USER_ENV_FILE_PATH} correctly?")
  end
  ENV[key]
end

before_all do
  # Check that the env files exist
  unless is_ci || File.file?(USER_ENV_FILE_PATH)
    UI.user_error!("~/.nios-env.default not found: Please copy env/user.env-example to #{USER_ENV_FILE_PATH} and fill in the values")
  end
  unless File.file?(PROJECT_ENV_FILE_PATH)
    UI.user_error!("project.env not found: Make sure your configuration is up to date with `rake dependencies`")
  end

  # This allows code signing to work on CircleCI
  # It is skipped if this isn't running on CI
  # See https://circleci.com/docs/2.0/ios-codesigning/
  setup_circle_ci
end

platform :ios do
  ########################################################################
  # Environment
  ########################################################################
  Dotenv.load(USER_ENV_FILE_PATH)
  Dotenv.load(PROJECT_ENV_FILE_PATH)
  ENV[GHHELPER_REPO="automattic/newspack-ios"]
  ENV["PROJECT_NAME"]="Newspack"
  ENV["PUBLIC_CONFIG_FILE"]="config/Version.Public.xcconfig"
  ENV["PROJECT_ROOT_FOLDER"]="./"

  #####################################################################################
  # build_and_upload_installable_build
  # -----------------------------------------------------------------------------------
  # This lane builds the app and upload it for adhoc testing
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_and_upload_installable_build [version_long:<version_long>]
  #
  # Example:
  # bundle exec fastlane build_and_upload_installable_build
  # bundle exec fastlane build_and_upload_installable_build build_number:123
  #####################################################################################
  desc "Builds and uploads an installable build"
  lane :build_and_upload_installable_build do | options |
    alpha_code_signing

    # Get the current build version, and update it if needed
    version_config_path = "../config/Version.Public.xcconfig"
    versions = Xcodeproj::Config.new(File.new(version_config_path)).to_hash
    build_number = versions["VERSION_LONG"]

    if options.key?(:build_number)
      build_number = options[:build_number]

      UI.message("Updating build version to #{build_number}")

      versions["VERSION_LONG"] = build_number
      new_config = Xcodeproj::Config.new(versions)
      new_config.save_as(Pathname.new(version_config_path))
    end

    gym(
      scheme: "Newspack-Alpha",
      workspace: "Newspack.xcworkspace",
      export_method: "enterprise",
      clean: true,
      output_directory: "build",
      export_team_id: ENV["INT_EXPORT_TEAM_ID"],
      export_options: { method: "enterprise", iCloudContainerEnvironment: 'Production' })

    sh("mv ../build/Newspack.ipa \"../build/Newspack-Alpha.ipa\"")

    # NOTE: "ipa" parameter is deprecated in appcenter_upload 1.6.0, but there's a bug in the action that
    # makes the default gym output override the "file" parameter.
    appcenter_upload(
      api_token: get_required_env("APPCENTER_API_TOKEN"),
      owner_name: "automattic",
      owner_type: "organization",
      app_name: "Newspack-Installable-Builds",
      ipa: "build/Newspack-Alpha.ipa",
      destinations: "All-users-of-Newspack-Installable-Builds",
      notify_testers: false
    )

    download_url = Actions.lane_context[SharedValues::APPCENTER_DOWNLOAD_LINK]
    UI.message("Successfully built and uploaded installable build here: #{download_url}")
    install_url = "https://install.appcenter.ms/orgs/automattic/apps/Newspack-Installable-Builds"

    # Create a comment.json file so that Peril to comment with the build details, if this is running on CI
    comment_body = "You can test the changes on this Pull Request by downloading it from AppCenter [here](#{install_url}) with build number: #{build_number}. IPA is available [here](#{download_url}). If you need access to this, you can ask a maintainer to add you."
    File.write("comment.json", { body: comment_body }.to_json)
  end

  ########################################################################
  # Fastlane match code signing
  ########################################################################
  private_lane :alpha_code_signing do |options|
    match(
      type: "enterprise",
      team_id: get_required_env("INT_EXPORT_TEAM_ID"),
      readonly: options[:readonly] || is_ci,
      app_identifier: ["com.automattic.newspack.alpha"])
  end 

end
